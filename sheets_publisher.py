import os
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import json
import logging
from datetime import datetime
import time
from gspread.exceptions import APIError

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MAX_RETRIES = 3
RETRY_DELAY = 5  # seconds

class GoogleSheetsPublisher:
    def __init__(self, credentials_json_string, spreadsheet_id, worksheet_name=None):
        """
        Initialize the Google Sheets publisher.

        Args:
            credentials_json_string: JSON string of service account credentials.
            spreadsheet_id: The Google Sheets spreadsheet ID.
            worksheet_name: Worksheet tab name to update; defaults to first sheet if None.
        """
        self.spreadsheet_id = spreadsheet_id
        self.worksheet_name = worksheet_name

        # Parse credentials and authorize client
        credentials_dict = json.loads(credentials_json_string)
        self.credentials = Credentials.from_service_account_info(
            credentials_dict,
            scopes=[
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
        )
        self.gc = gspread.authorize(self.credentials)
        logger.info("Google Sheets client authorized successfully.")

    def clear_and_update_sheet(self, csv_file_path):
        """
        Clear the worksheet and upload CSV data in bulk.

        Args:
            csv_file_path: Path to CSV file containing data.
        
        Returns:
            bool: True on success, False on failure.
        """
        try:
            logger.info(f"Opening spreadsheet ID: {self.spreadsheet_id}")
            spreadsheet = self.gc.open_by_key(self.spreadsheet_id)

            # Get or create worksheet
            if self.worksheet_name:
                try:
                    worksheet = spreadsheet.worksheet(self.worksheet_name)
                    logger.info(f"Found existing worksheet: '{self.worksheet_name}'")
                except gspread.WorksheetNotFound:
                    worksheet = spreadsheet.add_worksheet(title=self.worksheet_name, rows=1000, cols=50)
                    logger.info(f"Created new worksheet: '{self.worksheet_name}'")
            else:
                worksheet = spreadsheet.sheet1
                logger.info(f"Using first worksheet: '{worksheet.title}'")

            # Read CSV data into DataFrame
            logger.info(f"Reading CSV file: {csv_file_path}")
            df = pd.read_csv(csv_file_path)
            df.fillna('', inplace=True)  # Replace NaNs with empty strings

            # Clear existing worksheet content
            logger.info("Clearing existing worksheet content...")
            worksheet.clear()

            # Prepare data: header + rows
            data_to_upload = [df.columns.tolist()] + df.values.tolist()
            total_rows = len(data_to_upload)
            total_cols = len(df.columns)

            logger.info(f"Uploading {total_rows} rows and {total_cols} columns to Google Sheets...")

            # Retry wrapper for worksheet update
            for attempt in range(1, MAX_RETRIES + 1):
                try:
                    worksheet.update(
                        range_name=f'A1:{chr(64 + total_cols)}{total_rows}',
                        values=data_to_upload,
                        value_input_option='RAW'
                    )
                    logger.info("Data upload succeeded.")
                    break
                except APIError as e:
                    logger.error(f"APIError on attempt {attempt} of data upload: {e}")
                    if attempt == MAX_RETRIES:
                        raise
                    logger.info(f"Retrying in {RETRY_DELAY} seconds...")
                    time.sleep(RETRY_DELAY)

            # Prepare metadata info to append below data
            metadata = [
                ['Last Updated', datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')],
                ['Total Products', len(df)],
                ['Generated By', 'Automated Crawler System']
            ]
            metadata_start_row = total_rows + 2  # Leave one blank row

            # Retry wrapper for metadata update
            for attempt in range(1, MAX_RETRIES + 1):
                try:
                    worksheet.update(
                        range_name=f'A{metadata_start_row}:B{metadata_start_row + len(metadata) - 1}',
                        values=metadata,
                        value_input_option='RAW'
                    )
                    logger.info("Metadata upload succeeded.")
                    break
                except APIError as e:
                    logger.error(f"APIError on attempt {attempt} of metadata upload: {e}")
                    if attempt == MAX_RETRIES:
                        raise
                    logger.info(f"Retrying in {RETRY_DELAY} seconds...")
                    time.sleep(RETRY_DELAY)

            logger.info(f"‚úÖ Successfully updated Google Sheets with {len(df)} products.")
            return True

        except Exception as e:
            logger.error(f"‚ùå Error updating Google Sheets: {e}")
            return False

    def append_to_sheet(self, csv_file_path):
        """
        Append rows from CSV to existing worksheet.

        Args:
            csv_file_path: Path to CSV file containing data to append.
        
        Returns:
            bool: True on success, False on failure.
        """
        try:
            spreadsheet = self.gc.open_by_key(self.spreadsheet_id)
            worksheet = spreadsheet.worksheet(self.worksheet_name)

            df = pd.read_csv(csv_file_path)
            data_to_append = df.values.tolist()

            worksheet.append_rows(data_to_append, value_input_option='RAW')

            logger.info(f"‚úÖ Successfully appended {len(df)} products to Google Sheets.")
            return True

        except Exception as e:
            logger.error(f"‚ùå Error appending to Google Sheets: {e}")
            return False

def main():
    SPREADSHEET_ID = "1aNtP8UJyy8sDYf3tPpCAZt-zMMHwofjpyEqrN9b1bJI"
    CSV_FILE_PATH = "google_feed/google_merchant_feed_fixed.csv"
    WORKSHEET_NAME = "google_merchant_feed"

    credentials_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
    if not credentials_json:
        logger.error("‚ùå GOOGLE_SHEETS_CREDENTIALS environment variable not found.")
        return False

    if not os.path.exists(CSV_FILE_PATH):
        logger.error(f"‚ùå CSV file not found: {CSV_FILE_PATH}")
        return False

    publisher = GoogleSheetsPublisher(
        credentials_json_string=credentials_json,
        spreadsheet_id=SPREADSHEET_ID,
        worksheet_name=WORKSHEET_NAME
    )

    success = publisher.clear_and_update_sheet(CSV_FILE_PATH)

    if success:
        logger.info("üéâ Google Sheets update completed successfully!")
        print(f"üìä Updated spreadsheet: https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}")
        return True
    else:
        logger.error("üí• Google Sheets update failed!")
        return False

if __name__ == "__main__":
    main()
